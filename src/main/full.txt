ModBlocks.java
package net.wltd.cosmeticmod.block;

import net.minecraft.world.level.block.Block;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.wltd.cosmeticmod.CosmeticMod;

public class ModBlocks {

    public static final DeferredRegister<Block> BLOCKS =
            DeferredRegister.create(ForgeRegistries.BLOCKS, CosmeticMod.MOD_ID);

    public static void register(IEventBus eventBus) {
        BLOCKS.register(eventBus);
    }
}
DataGenerators.java
package net.wltd.cosmeticmod.datagen;

import net.minecraft.core.HolderLookup;
import net.minecraft.data.DataGenerator;
import net.minecraft.data.PackOutput;
import net.minecraftforge.common.data.ExistingFileHelper;
import net.minecraftforge.data.event.GatherDataEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.wltd.cosmeticmod.CosmeticMod;

import java.util.concurrent.CompletableFuture;

@Mod.EventBusSubscriber(modid = CosmeticMod.MOD_ID, bus = Mod.EventBusSubscriber.Bus.MOD)
public class DataGenerators {
    @SubscribeEvent
    public static void gatherData(GatherDataEvent event) {
        DataGenerator generator = event.getGenerator();
        PackOutput packOutput = generator.getPackOutput();
        ExistingFileHelper existingFileHelper = event.getExistingFileHelper();
        CompletableFuture<HolderLookup.Provider> lookupProvider = event.getLookupProvider();

        generator.addProvider(true, new ModRecipeProvider(packOutput));
        generator.addProvider(true, ModLootTableProvider.create(packOutput));
        generator.addProvider(true, new ModItemModelProvider(packOutput, existingFileHelper));
    }
}
ModBlockLootTables.java
package net.wltd.cosmeticmod.datagen;


import net.minecraft.data.loot.BlockLootSubProvider;
import net.minecraft.world.flag.FeatureFlags;
import net.minecraft.world.level.block.Block;
import net.minecraftforge.registries.RegistryObject;
import net.wltd.cosmeticmod.block.ModBlocks;

import java.util.Set;

public class ModBlockLootTables extends BlockLootSubProvider {
    public ModBlockLootTables() {
        super(Set.of(), FeatureFlags.REGISTRY.allFlags());
    }


    @Override
    protected void generate() {
    }

    @Override
    protected Iterable<Block> getKnownBlocks() {
        return ModBlocks.BLOCKS.getEntries().stream().map(RegistryObject::get)::iterator;
    }
}
ModItemModelProvider.java
package net.wltd.cosmeticmod.datagen;

import net.minecraftforge.common.data.ExistingFileHelper;
import net.wltd.cosmeticmod.CosmeticMod;
import net.wltd.cosmeticmod.item.ModItems;

import net.minecraft.data.PackOutput;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraftforge.client.model.generators.ItemModelBuilder;
import net.minecraftforge.client.model.generators.ItemModelProvider;
import net.minecraftforge.common.data.ExistingFileHelper;
import net.minecraftforge.registries.RegistryObject;

import java.util.Arrays;
import java.util.List;

public class ModItemModelProvider extends ItemModelProvider {

    private List<RegistryObject<Item>> items = Arrays.asList(
            ModItems.BASEYI_HELMET, ModItems.BASEYI_CHESTPLATE, ModItems.BASEYI_LEGGINGS,
            ModItems.BASEYI_BOOTS, ModItems.JAMESBOND_HELMET, ModItems.JAMESBOND_CHESTPLATE,
            ModItems.JAMESBOND_LEGGINGS, ModItems.JAMESBOND_BOOTS
    );
    public ModItemModelProvider(PackOutput output, ExistingFileHelper existingFileHelper) {
        super(output, CosmeticMod.MOD_ID, existingFileHelper);
    }

    @Override
    protected void registerModels() {
        items.forEach(this::simpleItem);
    }

    private ItemModelBuilder saplingItem(RegistryObject<Block> item) {
        return withExistingParent(item.getId().getPath(),
                new ResourceLocation("item/generated")).texture("layer0",
                new ResourceLocation(CosmeticMod.MOD_ID,"block/" + item.getId().getPath()));
    }

    private ItemModelBuilder simpleItem(RegistryObject<Item> item) {
        return withExistingParent(item.getId().getPath(),
                new ResourceLocation("item/generated")).texture("layer0",
                new ResourceLocation(CosmeticMod.MOD_ID,"item/" + item.getId().getPath()));
    }

    private ItemModelBuilder handheldItem(RegistryObject<Item> item) {
        return withExistingParent(item.getId().getPath(),
                new ResourceLocation("item/handheld")).texture("layer0",
                new ResourceLocation(CosmeticMod.MOD_ID,"item/" + item.getId().getPath()));
    }
}
ModLootTableProvider.java
package net.wltd.cosmeticmod.datagen;

import net.minecraft.data.PackOutput;
import net.minecraft.data.loot.LootTableProvider;
import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;

import java.util.List;
import java.util.Set;

public class ModLootTableProvider {    public static LootTableProvider create(PackOutput output) {
    return new LootTableProvider(output, Set.of(),
            List.of(new LootTableProvider.SubProviderEntry(ModBlockLootTables::new, LootContextParamSets.BLOCK)));
}
}
ModRecipeProvider.java
package net.wltd.cosmeticmod.datagen;

import net.minecraft.data.PackOutput;
import net.minecraft.data.recipes.FinishedRecipe;
import net.minecraft.data.recipes.RecipeProvider;
import net.minecraftforge.common.crafting.conditions.IConditionBuilder;

import java.util.function.Consumer;

public class ModRecipeProvider extends RecipeProvider implements IConditionBuilder {
    public ModRecipeProvider(PackOutput output) {
        super(output);
    }

    @Override
    protected void buildRecipes(Consumer<FinishedRecipe> consumer) {
        //oreSmelting(consumer, List.of(ModItems.RAW_BLACK_OPAL.get()), RecipeCategory.MISC,
        //        ModItems.BLACK_OPAL.get(), 0.7f, 200, "black_opal");

        //nineBlockStorageRecipes(consumer, RecipeCategory.BUILDING_BLOCKS, ModItems.BLACK_OPAL.get(), RecipeCategory.MISC,
        //        ModBlocks.BLACK_OPAL_BLOCK.get());

        // ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, ModItems.BLACK_OPAL.get())
        //         .requires(ModBlocks.BLACK_OPAL_BLOCK.get())
        //         .unlockedBy("has_black_opal_block", inventoryTrigger(ItemPredicate.Builder.item()
        //                 .of(ModBlocks.BLACK_OPAL_BLOCK.get()).build()))
        //         .save(consumer);

        // ShapedRecipeBuilder.shaped(RecipeCategory.MISC, ModBlocks.BLACK_OPAL_BLOCK.get())
        //         .define('B', ModItems.BLACK_OPAL.get())
        //         .pattern("BBB")
        //         .pattern("BBB")
        //         .pattern("BBB")
        //         .unlockedBy("has_black_opal", inventoryTrigger(ItemPredicate.Builder.item()
        //                 .of(ModItems.BLACK_OPAL.get()).build()))
        //         .save(consumer);
    }


}
ModEventBusEvents.java
package net.wltd.cosmeticmod.event;

public class ModEventBusEvents {


}
GenericArmorModel.java
package net.wltd.cosmeticmod.item.client.armor;

import net.minecraft.resources.ResourceLocation;
import net.wltd.cosmeticmod.CosmeticMod;
import net.wltd.cosmeticmod.item.custom.GenericArmorItem;
import software.bernie.geckolib.model.GeoModel;

public class GenericArmorModel extends GeoModel<GenericArmorItem> {
    private final String armorName;

    public GenericArmorModel(String armorName) {
        this.armorName = armorName;
    }

    @Override
    public ResourceLocation getModelResource(GenericArmorItem animatable) {
        return new ResourceLocation(CosmeticMod.MOD_ID, "geo/" + armorName + "_armor.geo.json");
    }

    @Override
    public ResourceLocation getTextureResource(GenericArmorItem animatable) {
        return new ResourceLocation(CosmeticMod.MOD_ID, "textures/armor/" + armorName + "_armor.png");
    }

    @Override
    public ResourceLocation getAnimationResource(GenericArmorItem animatable) {
        return new ResourceLocation(CosmeticMod.MOD_ID, "animations/" + armorName + "_armor.animation.json");
    }
}
GenericArmorRenderer.java
package net.wltd.cosmeticmod.item.client.armor;

import net.wltd.cosmeticmod.item.custom.GenericArmorItem;
import software.bernie.geckolib.renderer.GeoArmorRenderer;

public class GenericArmorRenderer extends GeoArmorRenderer<GenericArmorItem> {
    public GenericArmorRenderer(String armorName) {
        super(new GenericArmorModel(armorName));
    }
}
GenericArmorItem.java
package net.wltd.cosmeticmod.item.custom;

import net.minecraft.client.model.HumanoidModel;
import net.minecraft.world.entity.EquipmentSlot;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.item.ArmorItem;
import net.minecraft.world.item.ArmorMaterial;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.client.extensions.common.IClientItemExtensions;
import net.wltd.cosmeticmod.item.client.armor.GenericArmorRenderer;
import org.jetbrains.annotations.NotNull;
import software.bernie.geckolib.animatable.GeoItem;
import software.bernie.geckolib.core.animatable.instance.AnimatableInstanceCache;
import software.bernie.geckolib.core.animatable.instance.SingletonAnimatableInstanceCache;
import software.bernie.geckolib.core.animation.*;
import software.bernie.geckolib.core.object.PlayState;

import java.util.function.Consumer;

public class GenericArmorItem extends ArmorItem implements GeoItem {
    private AnimatableInstanceCache cache = new SingletonAnimatableInstanceCache(this);
    private final String armorName;

    public GenericArmorItem(ArmorMaterial material, Type type, Properties properties, String armorName) {
        super(material, type, properties);
        this.armorName = armorName;
    }

    @Override
    public void initializeClient(Consumer<IClientItemExtensions> consumer) {
        consumer.accept(new IClientItemExtensions() {
            private GenericArmorRenderer renderer;

            @Override
            public @NotNull HumanoidModel<?> getHumanoidArmorModel(LivingEntity livingEntity, ItemStack itemStack,
                                                                   EquipmentSlot equipmentSlot, HumanoidModel<?> original) {
                if (this.renderer == null)
                    this.renderer = new GenericArmorRenderer(armorName);

                this.renderer.prepForRender(livingEntity, itemStack, equipmentSlot, original);
                return this.renderer;
            }
        });
    }

    @Override
    public void registerControllers(AnimatableManager.ControllerRegistrar controllerRegistrar) {
        controllerRegistrar.add(new AnimationController(this, "controller", 0, this::predicate));
    }

    private PlayState predicate(AnimationState animationState) {
        animationState.getController().setAnimation(RawAnimation.begin().then("idle", Animation.LoopType.LOOP));
        return PlayState.CONTINUE;
    }

    @Override
    public AnimatableInstanceCache getAnimatableInstanceCache() {
        return cache;
    }
}
ModArmorMaterials.java
package net.wltd.cosmeticmod.item;

import net.minecraft.Util;
import net.minecraft.sounds.SoundEvent;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.util.LazyLoadedValue;
import net.minecraft.util.StringRepresentable;
import net.minecraft.world.item.ArmorItem;
import net.minecraft.world.item.ArmorMaterial;
import net.minecraft.world.item.ArmorMaterials;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.crafting.Ingredient;

import java.util.EnumMap;
import java.util.function.Supplier;


public enum ModArmorMaterials implements ArmorMaterial {
    BASEYI("baseyi", 5,Util.make(new EnumMap<>(ArmorItem.Type.class), (p_266655_) -> {
        p_266655_.put(ArmorItem.Type.BOOTS, 1);
        p_266655_.put(ArmorItem.Type.LEGGINGS, 2);
        p_266655_.put(ArmorItem.Type.CHESTPLATE, 3);
        p_266655_.put(ArmorItem.Type.HELMET, 1);
    }), 19, SoundEvents.ARMOR_EQUIP_LEATHER, 0.0F, 0.0F, () -> {
        return Ingredient.of(Items.LEATHER);
    }),

    JAMESBOND("jamesbond", 5,Util.make(new EnumMap<>(ArmorItem.Type.class), (p_266655_) -> {
        p_266655_.put(ArmorItem.Type.BOOTS, 1);
        p_266655_.put(ArmorItem.Type.LEGGINGS, 2);
        p_266655_.put(ArmorItem.Type.CHESTPLATE, 3);
        p_266655_.put(ArmorItem.Type.HELMET, 1);
    }), 19, SoundEvents.ARMOR_EQUIP_LEATHER, 0.0F, 0.0F, () -> {
        return Ingredient.of(Items.LEATHER);
    });

    public static final StringRepresentable.EnumCodec<ArmorMaterials> CODEC = StringRepresentable.fromEnum(ArmorMaterials::values);
    private static final EnumMap<ArmorItem.Type, Integer> HEALTH_FUNCTION_FOR_TYPE = Util.make(new EnumMap<>(ArmorItem.Type.class), (p_266653_) -> {
        p_266653_.put(ArmorItem.Type.BOOTS, 13);
        p_266653_.put(ArmorItem.Type.LEGGINGS, 15);
        p_266653_.put(ArmorItem.Type.CHESTPLATE, 16);
        p_266653_.put(ArmorItem.Type.HELMET, 11);
    });
    private final String name;
    private final int durabilityMultiplier;
    private final EnumMap<ArmorItem.Type, Integer> protectionFunctionForType;
    private final int enchantmentValue;
    private final SoundEvent sound;
    private final float toughness;
    private final float knockbackResistance;
    private final LazyLoadedValue<Ingredient> repairIngredient;

    private ModArmorMaterials(String p_268171_, int p_268303_, EnumMap<ArmorItem.Type, Integer> p_267941_, int p_268086_, SoundEvent p_268145_, float p_268058_, float p_268180_, Supplier<Ingredient> p_268256_) {
        this.name = p_268171_;
        this.durabilityMultiplier = p_268303_;
        this.protectionFunctionForType = p_267941_;
        this.enchantmentValue = p_268086_;
        this.sound = p_268145_;
        this.toughness = p_268058_;
        this.knockbackResistance = p_268180_;
        this.repairIngredient = new LazyLoadedValue<>(p_268256_);
    }

    public int getDurabilityForType(ArmorItem.Type p_266745_) {
        return HEALTH_FUNCTION_FOR_TYPE.get(p_266745_) * this.durabilityMultiplier;
    }

    public int getDefenseForType(ArmorItem.Type p_266752_) {
        return this.protectionFunctionForType.get(p_266752_);
    }

    public int getEnchantmentValue() {
        return this.enchantmentValue;
    }

    public SoundEvent getEquipSound() {
        return this.sound;
    }

    public Ingredient getRepairIngredient() {
        return this.repairIngredient.get();
    }

    public String getName() {
        return this.name;
    }

    public float getToughness() {
        return this.toughness;
    }

    public float getKnockbackResistance() {
        return this.knockbackResistance;
    }

    public String getSerializedName() {
        return this.name;
    }
}
ModCreativeModeTabs.java
package net.wltd.cosmeticmod.item;

import net.minecraft.core.registries.Registries;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.CreativeModeTab;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.event.BuildCreativeModeTabContentsEvent;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.RegistryObject;
import net.wltd.cosmeticmod.CosmeticMod;

public class ModCreativeModeTabs {
    public static final DeferredRegister<CreativeModeTab> CREATIVE_MODE_TABS = DeferredRegister.create(Registries.CREATIVE_MODE_TAB, CosmeticMod.MOD_ID);

    public static RegistryObject<CreativeModeTab> COSMETIC_TAB = CREATIVE_MODE_TABS.register("cosmetic_tab", () ->
            CreativeModeTab.builder().icon(() -> new ItemStack(ModItems.BASEYI_HELMET.get()))
                    .title(Component.translatable("creativemodetab.cosmetic_tab")).build());

    public static void register(IEventBus eventBus){
        CREATIVE_MODE_TABS.register(eventBus);
    }
}
ModItems.java
package net.wltd.cosmeticmod.item;

import net.minecraft.world.item.ArmorItem;
import net.minecraft.world.item.Item;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;
import net.wltd.cosmeticmod.CosmeticMod;
import net.wltd.cosmeticmod.item.custom.GenericArmorItem;

public class ModItems {

    public static final DeferredRegister<Item> ITEMS =
            DeferredRegister.create(ForgeRegistries.ITEMS, CosmeticMod.MOD_ID);

    public static final RegistryObject<Item> BASEYI_HELMET = ITEMS.register("baseyi_helmet",
            () -> new GenericArmorItem(ModArmorMaterials.BASEYI, ArmorItem.Type.HELMET, new Item.Properties(), "baseyi"));
    public static final RegistryObject<Item> BASEYI_CHESTPLATE = ITEMS.register("baseyi_chestplate",
            () -> new GenericArmorItem(ModArmorMaterials.BASEYI, ArmorItem.Type.CHESTPLATE, new Item.Properties(), "baseyi"));
    public static final RegistryObject<Item> BASEYI_LEGGINGS = ITEMS.register("baseyi_leggings",
            () -> new GenericArmorItem(ModArmorMaterials.BASEYI, ArmorItem.Type.LEGGINGS, new Item.Properties(), "baseyi"));
    public static final RegistryObject<Item> BASEYI_BOOTS = ITEMS.register("baseyi_boots",
            () -> new GenericArmorItem(ModArmorMaterials.BASEYI, ArmorItem.Type.BOOTS, new Item.Properties(), "baseyi"));

    public static final RegistryObject<Item> JAMESBOND_HELMET = ITEMS.register("jamesbond_helmet",
            () -> new GenericArmorItem(ModArmorMaterials.JAMESBOND, ArmorItem.Type.HELMET, new Item.Properties(), "jamesbond"));
    public static final RegistryObject<Item> JAMESBOND_CHESTPLATE = ITEMS.register("jamesbond_chestplate",
            () -> new GenericArmorItem(ModArmorMaterials.JAMESBOND, ArmorItem.Type.CHESTPLATE, new Item.Properties(), "jamesbond"));
    public static final RegistryObject<Item> JAMESBOND_LEGGINGS = ITEMS.register("jamesbond_leggings",
            () -> new GenericArmorItem(ModArmorMaterials.JAMESBOND, ArmorItem.Type.LEGGINGS, new Item.Properties(), "jamesbond"));
    public static final RegistryObject<Item> JAMESBOND_BOOTS = ITEMS.register("jamesbond_boots",
            () -> new GenericArmorItem(ModArmorMaterials.JAMESBOND, ArmorItem.Type.BOOTS, new Item.Properties(), "jamesbond"));

    public static void register(IEventBus eventBus) {
        ITEMS.register(eventBus);
    }
}
CosmeticMod.java
package net.wltd.cosmeticmod;

import com.mojang.logging.LogUtils;
import net.minecraft.world.item.CreativeModeTabs;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.BuildCreativeModeTabContentsEvent;
import net.minecraftforge.eventbus.api.Event;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import net.wltd.cosmeticmod.block.ModBlocks;
import net.wltd.cosmeticmod.item.ModCreativeModeTabs;
import net.wltd.cosmeticmod.item.ModItems;
import org.slf4j.Logger;
import software.bernie.geckolib.GeckoLib;

@Mod(CosmeticMod.MOD_ID)
public class CosmeticMod {
    public static final String MOD_ID = "cosmeticmod";
    private static final Logger LOGGER = LogUtils.getLogger();

    public CosmeticMod() {
        IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();

        ModCreativeModeTabs.register(modEventBus);

        ModItems.register(modEventBus);
        ModBlocks.register(modEventBus);


        GeckoLib.initialize();

        modEventBus.addListener(this::commonSetup);
        MinecraftForge.EVENT_BUS.register(this);

        modEventBus.addListener(this::addCreative);
    }

    private void addCreative(BuildCreativeModeTabContentsEvent event) {
        if (event.getTab() == ModCreativeModeTabs.COSMETIC_TAB.get()) {
            event.accept(ModItems.BASEYI_HELMET);
            event.accept(ModItems.BASEYI_CHESTPLATE);
            event.accept(ModItems.BASEYI_LEGGINGS);
            event.accept(ModItems.BASEYI_BOOTS);
            event.accept(ModItems.JAMESBOND_HELMET);
            event.accept(ModItems.JAMESBOND_CHESTPLATE);
            event.accept(ModItems.JAMESBOND_LEGGINGS);
            event.accept(ModItems.JAMESBOND_BOOTS);
        }
    }

    private void commonSetup(final FMLCommonSetupEvent event) {

    }

}
